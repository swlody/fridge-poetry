# See https://fly.io/docs/app-guides/continuous-deployment-with-github-actions/

name: Deploy System
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  deploy-frontend:
    name: Build and deploy to Cloudflare Pages
    runs-on: ubuntu-latest
    env:
      DENO_DIR: ~/.deno
    permissions:
      contents: read
      deployments: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Deno dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.DENO_DIR }}
          key: ${{ hashFiles('./frontend/deno.lock') }}

      - name: Setup Deno
        uses: denolib/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Install dependencies
        working-directory: ./frontend
        run: deno install --allow-scripts

      - name: Build dist folder
        working-directory: ./frontend
        run: deno task build

      - name: Deploy
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy ./frontend/dist --project-name=fridge-poetry

  deploy-backend:
    name: Deploy to fly.io
    runs-on: ubuntu-latest
    needs: deploy-frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Install SQLx CLI
        run: cargo install sqlx-cli --no-default-features --features postgres

      - name: Run migrations
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: sqlx migrate run

      - name: Build and deploy Docker container
        run: flyctl deploy --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
          runs-on: ubuntu-latest

      - name: Rollback frontend if failed
        if: failure()
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: rollback

      - name: Rollback migrations if failed
        if: failure()
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: sqlx migrate revert
